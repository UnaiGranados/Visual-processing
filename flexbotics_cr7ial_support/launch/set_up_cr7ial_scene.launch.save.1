<?xml version="1.0"?>
<launch>

  <!-- Input arguments. If "use_sim" not specified will run in simulation mode -->
  <arg name="use_sim" default="true" />
  <arg name="use_gazebo" default="true" />
  <arg name="use_moveit" default="false" />
  <arg name="use_mc" default="false" />
  <arg name="robot_ip" unless="$(arg use_sim)" default="192.168.0.2"/>
  <arg name="launch_rviz" default="true" />
  <arg name="rviz_config" default="$(find flexbotics_cr7ial_support)/launch/cr7ial_scene.rviz" />
  <arg name="use_rs_gazebo" default="true" />

  <arg name="robot_name" value="calibration_scene"/>
  <arg name="robot_description" default="robot_description"/>

  <!-- FANUC CR-7iA/L configuration and scene URDF -->
  <param name="robot_name" value="$(arg robot_name)"/>
  <param name="$(arg robot_description)" command="$(find xacro)/xacro '$(find flexbotics_cr7ial_support)/urdf/cr7ial_scene.urdf.xacro'" />
  <param name="$(arg robot_description)_semantic" textfile="$(find flexbotics_cr7ial_moveit_config_2)/config/calibration_scene.srdf" />
  <rosparam command="load" file="$(find fanuc_cr7ia_support)/config/joint_names_cr7ial.yaml" />

  <!-- Launch MoveIt! -->
  <group if="$(arg use_moveit)">

    <!-- Planning context -->
    <group ns="$(arg robot_description)_planning">
      <rosparam command="load" file="$(find flexbotics_cr7ial_moveit_config_2)/config/joint_limits.yaml"/>
    </group>
    <group ns="$(arg robot_description)_kinematics">
      <rosparam command="load" file="$(find flexbotics_cr7ial_moveit_config_2)/config/kinematics.yaml"/>
    </group>

    <!-- Move group -->
    <!-- Run the main MoveIt! executable without trajectory execution (we do not have controllers configured by default) -->
    <include file="$(find flexbotics_cr7ial_moveit_config_2)/launch/move_group.launch">
      <arg name="allow_trajectory_execution" value="true"/>
      <arg name="fake_execution" value="false"/>
      <arg name="execution_type" value="interpolate"/>
      <arg name="info" value="true"/>
      <arg name="pipeline" value="ompl"/>
      <!-- <arg name="load_robot_description" value="$(arg load_robot_description)"/> -->
    </include>
  </group>

  <!-- Launch the robot_state_publisher node -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <!-- Simulated robot setup (Gazebo or industrial simulator)-->
  <group if="$(arg use_sim)">

    <!-- Gazebo -->
    <group if="$(arg use_gazebo)">
      <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="debug" value="false" />
      <arg name="gui" value="true" />
      <arg name="paused" value="false" />
      <arg name="use_sim_time" value="true" />
      <arg name="headless" value="false" />
      <arg name="world_name" default="$(find fanuc_cr7ial_gazebo_support)/worlds/fanuc.world"/>
      </include>

      <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
      <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-param robot_description -urdf -model calibration_scene" />

      <rosparam command="load" file="$(find fanuc_cr7ial_gazebo_support)/config/gazebo_manipulator_control.yaml" />
      <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="spawn fanuc_cr7ial_controller" />

      <rosparam command="load" file="$(find fanuc_cr7ial_gazebo_support)/config/joint_state_controller.yaml" />
      <node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="spawn joint_state_controller" />

    </group>

    <group unless="$(arg use_gazebo)">
      <include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch"/>
      
        <!-- RealSense camera  -->
        <group unless="$(arg use_rs_gazebo)">
          <include file="$(find realsense2_camera)/launch/rs_camera.launch">
            <arg name="align_depth" value="true"/>
            <arg name="filters" value="pointcloud"/>
          </include>
        </group>
      
    </group>

  </group>

  <!-- Real robot setup -->
  <group unless="$(arg use_sim)">
    <arg name="use_bswap" unless="$(arg use_sim)" default="true" doc="If true, robot driver will byte-swap all incoming and outgoing data (only required if not using industrial simulator)" />
    <include file="$(find fanuc_cr7ia_support)/launch/robot_interface_streaming_cr7ial.launch" >
      <arg name="robot_ip" value="$(arg robot_ip)"/>
      <arg name="use_bswap"  value="$(arg use_bswap)" />
    </include>
  </group>

  <!-- Manipulator Controller -->
  <group ns="$(arg robot_name)" if="$(arg use_mc)">
    <rosparam file="$(find flexbotics_cr7ial_support)/config/manipulator_controller.yaml"/>
    <rosparam file="$(find flexbotics_cr7ial_support)/config/manipulator_commander.yaml"/>
    <node name="manipulator_controller" pkg="manipulator_controller" type="manipulator_controller_node"/>
  </group>

  <!-- RViz configuration -->
  <group if="$(arg launch_rviz)">
    <arg     if="$(eval rviz_config=='')" name="command_args" value="" />
    <arg unless="$(eval rviz_config=='')" name="command_args" value="-d $(arg rviz_config)" />
    <node name="$(anon rviz)" pkg="rviz" type="rviz" respawn="false" args="$(arg command_args)" output="screen" />
  </group>


  <!-- Load internal camera calibration intrinsics  -->
  <include file="$(find visual_processing)/launch/visual_processing.launch"/>

  <!-- camera -->
  <node pkg="tf" type="static_transform_publisher" name="arm_camera_to_flange" args="0.13 -0.079 0.118 1.224 -0.005 1.539 tool0 camera_color_optical_frame 100"/>
  <!-- <include file="$(find realsense2_camera)/launch/rs_rgbd.launch"/> -->

  <!-- Move group -->
  <node name="moveit_move_group" pkg="visual_processing" type="moveit_move_group.py" respawn="false" output="screen">
  </node> 

  <!-- arguments for the RealSense urdf xacro file, rviz visualization and namespace -->
  <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find realsense2_description)/rviz/urdf.rviz" required="true" /> -->
    
</launch>

